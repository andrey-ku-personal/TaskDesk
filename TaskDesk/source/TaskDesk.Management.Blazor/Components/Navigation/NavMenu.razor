@inject IDialogService DialogService

<MudDrawerContainer Class="mud-height-full">
    <MudDrawer Open="true" Elevation="0" Variant="@DrawerVariant.Persistent">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">Task Desk</MudText>
        </MudDrawerHeader>
        <MudNavMenu>
                <MudNavLink Href="/project/list" Icon="@Icons.Material.Filled.ViewList">Projects</MudNavLink>
        </MudNavMenu>
    </MudDrawer>
</MudDrawerContainer>

@*code {
    private bool _showProjects;
    private int _pageIndex = 1;

    private Core.FilterModel _filter = new () { PageSize = 5 }!;
    private FilteredResult<ProjectViewModel> _result = new();

    private async Task OpenProjectCreateDialog()
    {
        await DialogService.ShowAsync<Navigation.DialogCreateMenu>();
    }

    private async Task OpenProjects()
    {
        if (!_showProjects)
            _result = await Load(_filter);

        _showProjects = !_showProjects;

        Navigation.NavigateTo("project/list");
    }

    private async Task Paginate(int pageNumber)
    {
        _pageIndex = pageNumber;
        _filter.PageNumber = pageNumber - 1;

        _result = await Load(_filter);
    }

    private async Task SearchByText(string text)
    {
        _filter.PageNumber = 0;

        _result = await Load(_filter);

        _pageIndex = 1;
    }

    private async Task<FilteredResult<ProjectViewModel>> Load(Core.FilterModel filter)
        => await HttpClient.GetAll(filter);
}
*@